local function log(level, msg)
    if level == 0 then
        term.setTextColor(colors.red)
        print("[CRIT] "..msg)
    elseif level == 1 then
        term.setTextColor(colors.yellow)
        print("[WARN] "..msg)
    elseif level == 2 then
        term.setTextColor(colors.white)
        print("[INFO] "..msg)
    end
    term.setTextColor(colors.white)
end

local function isPrecious(name)
    return string.find(data.name,"log") or string.find(data.name,"leaves") or string.find(data.name, "sapling")
end

local function recursiveMine()
    -- Start slice inspection. Assumes we are facing forward.
    local orientation = 0
    
    -- Check forward
    success,data = turtle.inspect()
    if success and (isPrecious(data.name)) then
        turtle.dig()
        
        turtle.forward()
        
        recursiveMine()
        orientation = turn("b",orientation)
        turtle.forward()
        
    end

    -- Check up
    local success,data = turtle.inspectUp()
    if success and (isPrecious(data.name)) then
        turtle.digUp()
        
        turtle.up()
        
        recursiveMine()
        turtle.down()
        
    end

    -- Check down
    success,data = turtle.inspectDown()
    if success and (isPrecious(data.name)) then
        turtle.digDown()
        
        turtle.down()
        
        recursiveMine()
        turtle.up()
        
    end

    -- Check left
    orientation = turn("l",orientation)
    success,data = turtle.inspect()
    if success and (isPrecious(data.name)) then
        turtle.dig()
        
        turtle.forward()
        
        recursiveMine()
        orientation = turn("r",orientation)
        turtle.forward()
        
    end

    -- Check backwards
    orientation = turn("b",orientation)
    success,data = turtle.inspect()
    if success and (isPrecious(data.name)) then
        turtle.dig()
        
        turtle.forward()
        
        recursiveMine()
        orientation = turn("f",orientation)
        turtle.forward()
        
    end

    -- Check right
    orientation = turn("r",orientation)
    success,data = turtle.inspect()
    if success and (isPrecious(data.name)) then
        turtle.dig()
        
        turtle.forward()
        
        recursiveMine()
        orientation = turn("l",orientation)
        turtle.forward()
        
    end
    -- Restore orientation
    orientation = turn("f",orientation)
    -- End slice inspection
end

log(2, "axe version: 2")

local success,data = turtle.inspect()

if not success or (not string.find(data.name, "sapling") and not string.find(data.name, "log")) then
    log(0, "No sapling found in front. This is not a valid farm.")
    return
end

-- Wait for sapling in front to grow up.

while not string.find(data.name, "log") do
    os.sleep(1)
end

recursiveMine()

