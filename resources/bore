local function log(level, msg)
    if level == 0 then
        term.setTextColor(colors.red)
        print("[CRIT] "..msg)
    elseif level == 1 then
        term.setTextColor(colors.yellow)
        print("[WARN] "..msg)
    elseif level == 2 then
        term.setTextColor(colors.white)
        print("[INFO] "..msg)
    end
    term.setTextColor(colors.white)
end

log(2,"bore version: 3")
if table.getn(arg) == 0 then
    log(2,"Usage: bore <depth> <width> <height>. Place turtle at bottom left of the tunnel, facing the direction you want to bore.")
    return
end

local function turn(direction, orientation)
    local finalorientation = 0
    local delta = 0
    if direction == "f" then
        delta = math.fmod(1 - orientation, 4) - 1
        finalorientation = 0
    elseif direction == "r" then
        delta = 1 - math.fmod(orientation, 4)
        finalorientation = 1
    elseif direction == "b" then
        delta = 2 - math.fmod(orientation, 4)
        finalorientation = 2
    elseif direction == "l" then
        delta = math.fmod(1 - orientation, 4) - 2
        finalorientation = 3
    end
    while delta ~= 0 do
        if delta < 0 then
            turtle.turnLeft()
            delta = delta + 1
        else
            turtle.turnRight()
            delta = delta - 1
        end
    end
    return finalorientation
end

local function forceForward()
    while(not turtle.forward()) do  
        turtle.dig()
    end
end

local function forceUp()
    while(not turtle.up()) do  
        turtle.digUp()
    end
end


depth = tonumber(arg[1])
width = tonumber(arg[2])
height = tonumber(arg[3])

-- (TODO) Make sure this calculation is correct lol
requiredFuel = (depth + 1) * width * height


if requiredFuel > turtle.getFuelLevel() then
    log(0, "Not enough fuel. You need at least "..requiredFuel)
    return
end

local orientation = 0

local odd = math.fmod(width,2)
if odd then print("Width is odd") end
for y=1,height do
    for x=1,width do
        for z=1,depth-1 do
            forceForward()
        end
        log(2, "Finished mining one line.")
        forceForward()
        if x ~= width then
            if math.fmod(y,2) == 1 then
                orientation = turn("r", orientation)
                log(2, "Mining on an odd level ("..y.."), so we will turn right.")
            else
                orientation = turn("l", orientation)
                log(2, "Mining on an even level ("..y.."), so we will turn left.")
            end
            forceForward()
            if math.fmod(x,2) == 1 then
                if odd and math.fmod(y,2) == 0 then
                    orientation = turn("f", orientation)
                    log(2, "Mining on an even level ("..y.."), with odd width, so we will turn forward.")
                else
                    orientation = turn("b", orientation)
                    log(2, "Mining on an odd level ("..y.."), so we will turn backward.")
                end
            else
                if odd and math.fmod(y,2) == 0 then
                    orientation = turn("b", orientation)
                    log(2, "Mining on an even level ("..y.."), so we will turn backward.")
                else
                    orientation = turn("f", orientation)
                    log(2, "Mining on an odd level ("..y.."), so we will turn backward.")
                end
            end
        end
    
    end 
    forceUp()
    if odd and math.fmod(y,2) == 0 then
        orientation = turn("f", orientation)
        log(2, "Mining on an even level ("..y.."), with odd width, so we will turn forward.")
    else
        orientation = turn("b", orientation)
        log(2, "Mining on an odd level ("..y.."), so we will turn backward.")
    end
end