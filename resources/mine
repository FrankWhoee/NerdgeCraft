local function log(level, msg)
    if level == 0 then
        term.setTextColor(colors.red)
        print("[CRIT] "..msg)
    elseif level == 1 then
        term.setTextColor(colors.yellow)
        print("[WARN] "..msg)
    elseif level == 2 then
        term.setTextColor(colors.white)
        print("[INFO] "..msg)
    end
    term.setTextColor(colors.white)
end

log(2, "mine version: 10")
local function isInventoryFull()
    occupied_slots = 0
    for i=1,16 do
        local count = turtle.getItemCount(i)
        local data = turtle.getItemDetail(i)
        if count > 0 and ((string.find(data.name,"ore") and count == 64) or count > 1) then
            occupied_slots = occupied_slots + 1 
        end
    end
    return occupied_slots == 16
end

if table.getn(arg) == 0 then
    log(2, "Usage: mine <currentY> <length: OPTIONAL>")
    return
end
if table.getn(arg) == 2 then
    length = tonumber(arg[2])
else
    length = -1
end

if length == -1 then
    log(1,"[WARN] No length entered. Turtle will mine until it runs out of fuel or until its inventory is full.")
else
    log(2,"[INFO] Turtle will mine "..length.." horizontally.")
end

-- valuables to look for to mine. Unsupported currently.
local valuables = {}

local y = tonumber(arg[1])

local targetY = 14

local deltaY = y - targetY

local requiredFuel = (deltaY + length) * 2 + 2

if deltaY * 2 > turtle.getFuelLevel() then
    log(0,"[CRIT] Not enough fuel to begin. You need at least "..(deltaY * 2 + 2).." fuel to begin.")
    if length ~= -1 then
        log(2,"[INFO] To complete the mining journey you requested, you need "..requiredFuel..".")
    end
    return
end

if length ~= -1 and requiredFuel > turtle.getFuelLevel() then
    log(1,"[WARN] You do not have enough fuel to complete this mining journey. You need "..requiredFuel..". Turtle will go as far as it can.")
        return
end

distance = 0
local horizontalDistance = 0
mined = 0
local orientation = 0

-- Slice is defined as the blocks in the plane adjacent to the roll axis of the turtle.
-- p_0 is defined as our starting position

-- (TODO) Possible optimization: Drop down to track instead of recursively returning to p_0, because we might dig forwards and all we need to do is align ourselves
-- to the track and drop down instead of wasting fuel returning to p_0.

-- (TODO) Another optimization: Keep track of where we came from so we don't have to check that direction anymore

local function turn(direction, orientation)
    local finalorientation = 0
    local delta = 0
    if direction == "f" then
        delta = math.fmod(5 - orientation, 4) - 1
        finalorientation = 0
    elseif direction == "r" then
        delta = 1 - math.fmod(orientation, 4)
        finalorientation = 1
    elseif direction == "b" then
        delta = 2 - math.fmod(orientation, 4)
        finalorientation = 2
    elseif direction == "l" then
        delta = math.fmod(5 - orientation, 4) - 2
        finalorientation = 3
    end
    while delta ~= 0 do
        if delta < 0 then
            turtle.turnLeft()
            delta = delta + 1
        else
            turtle.turnRight()
            delta = delta - 1
        end
    end
    return finalorientation
end

local function recursiveMine(orientation)
    -- Start slice inspection.
    -- Check up
    local success,data = turtle.inspectUp()
    if success and string.find(data.name,"ore") then
        turtle.digUp()
        mined = mined + 1
        turtle.up()
        distance = distance + 1
        recursiveMine()
        turtle.down()
        distance = distance + 1
    end

    -- Check down
    success,data = turtle.inspectDown()
    if success and string.find(data.name,"ore") then
        turtle.digDown()
        mined = mined + 1
        turtle.down()
        distance = distance + 1
        recursiveMine()
        turtle.up()
        distance = distance + 1
    end

    -- Check forward
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
        mined = mined + 1
        turtle.forward()
        distance = distance + 1
        recursiveMine()
        orientation = turn("b",orientation)
        turtle.forward()
        distance = distance + 1
    end

    -- Check left
    orientation = turn("l",orientation)
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
        mined = mined + 1
        turtle.forward()
        distance = distance + 1
        recursiveMine()
        orientation = turn("r",orientation)
        turtle.forward()
        distance = distance + 1
    end

    -- Check backwards
    orientation = turn("b",orientation)
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
        mined = mined + 1
        turtle.forward()
        distance = distance + 1
        recursiveMine()
        orientation = turn("f",orientation)
        turtle.forward()
        distance = distance + 1
    end

    -- Check right
    orientation = turn("r",orientation)
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
        mined = mined + 1
        turtle.forward()
        distance = distance + 1
        recursiveMine()
        orientation = turn("l",orientation)
        turtle.forward()
        distance = distance + 1
    end
    return orientation
    -- End slice inspection
end

log(3,"[INFO] Vertical excavation begins.")
for i=1,deltaY do
    distance = distance + 1
    while(not turtle.down()) do  
        turtle.digDown()
        mined = mined + 1
    end
end


log(3,"[INFO] Vertical excavation ends. Mining begins.")
while distance * 2 < turtle.getFuelLevel() and not isInventoryFull() and (length == -1 or horizontalDistance < length) do
    while(not turtle.forward()) do  
        turtle.dig()
        mined = mined + 1
    end
    
    distance = distance + 1
    horizontalDistance = horizontalDistance + 1

    -- Will inspect slice and mine recursively.
    orientation = recursiveMine()
    -- Restore orientation
    orientation = turn("f",orientation)
    -- Print progress
    
    if length ~= -1 then
        local progress = (horizontalDistance / length) * 100
        if(math.fmod(math.floor(progress), 10) == 0) then
            log(3,"[INFO] "..progress.."% complete.")
        end
    else
        if math.fmod(horizontalDistance, 100) == 0 then
            log(3,"[INFO] Traveled ".. distance.." blocks.")
        end
    end
end
log(3,"[INFO] Mining journey complete. Returning home.")
-- Turn around and return
turn("b",orientation)

while horizontalDistance > 0 do
    while(not turtle.forward()) do 
        turtle.dig()
        mined = mined + 1
    end
    horizontalDistance = horizontalDistance - 1
end
log(3,"[INFO] Returned to original XZ coords, moving up.")
while deltaY > 0 do
    while(not turtle.up()) do 
        turtle.digUp()
        mined = mined + 1
    end
    deltaY = deltaY - 1
end
 
log(3,"[INFO] Mined "..mined.." blocks.")
log(3,"[INFO] Travelled "..distance.." blocks.")

-- Back up onto solid ground for easy breakage (hopefully)
turn("b",orientation)
while(not turtle.forward()) do 
    turtle.dig()
    mined = mined + 1
end
while(not turtle.forward()) do 
    turtle.dig()
    mined = mined + 1
end
turn("f",orientation)
log(3,"[INFO] Turtle is home.")
