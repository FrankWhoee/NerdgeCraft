local function isInventoryFull()
    occupied_slots = 0
    for i=1,16 do
        local count = turtle.getItemCount(i)
        local data = turtle.getItemDetail(i)
        if count > 0 and ((string.find(data.name,"ore") and count == 64) or count > 1) then
            occupied_slots = occupied_slots + 1 
        end
    end
    return occupied_slots == 16
end

if table.getn(arg) == 0 then
    print("Usage: mine <currentY> <length: OPTIONAL>")
    return
end
if table.getn(arg) == 2 then
    length = tonumber(arg[2])
else
    length = -1
end

if length == -1 then
    print("[WARN] No length entered. Turtle will mine until it runs out of fuel or until its inventory is full.")
else
    print("[INFO] Turtle will mine "..length.." horizontally.")
end

-- valuables to look for to mine. Unsupported currently.
local valuables = {}

local y = tonumber(arg[1])

local targetY = 14

local deltaY = y - targetY

local requiredFuel = (deltaY + length) * 2 + 2

if deltaY * 2 > turtle.getFuelLevel() then
    print("[CRIT] Not enough fuel to begin. You need at least "..(deltaY * 2 + 2).." fuel to begin.")
    if length ~= -1 then
        print("[INFO] To complete the mining journey you requested, you need "..requiredFuel..".")
        return
    end
end

if length ~= -1 and requiredFuel > turtle.getFuelLevel() then
    print("[WARN] You do not have enough fuel to complete this mining journey. You need "..requiredFuel..". Turtle will go as far as it can.")
end

local distance = 0
local horizontalDistance = 0

print("[INFO] Vertical excavation begins.")
for i=1,deltaY do
    distance = distance + 1
    turtle.digDown()
    turtle.down()
end


print("[INFO] Vertical excavation ends. Mining begins.")
while distance * 2 < turtle.getFuelLevel() and not isInventoryFull() and (length == -1 or horizontalDistance < length) do
    while(not turtle.forward()) do  
        turtle.dig()
    end
    
    distance = distance + 1
    horizontalDistance = horizontalDistance + 1

    -- Start slice inspection
    -- Check up, down, left and right for precious ores
    local success,data = turtle.inspectUp()
    if success and string.find(data.name,"ore") then
        turtle.digUp()
    end

    success,data = turtle.inspectDown()
    if success and string.find(data.name,"ore") then
        turtle.digDown()
    end

    turtle.turnLeft()
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
    end

    turtle.turnRight()
    turtle.turnRight()
    success,data = turtle.inspect()
    if success and string.find(data.name,"ore") then
        turtle.dig()
    end

    -- Restore orientation
    turtle.turnLeft()

    -- End slice inspection

    -- Print progress
    local progress = (horizontalDistance / length) * 100
    if(math.fmod(math.floor(progress), 10) == 0) then
        print("[INFO] "..progress.."% complete.")
    end
end
print("[INFO] Mining journey complete. Returning home.")
-- Turn around and return
turtle.turnRight()
turtle.turnRight()

while horizontalDistance > 0 do
    while(not turtle.forward()) do 
        turtle.dig()
    end
    horizontalDistance = horizontalDistance - 1
end
print("[INFO] Returned to original XZ coords, moving up.")
while deltaY > 0 do
    while(not turtle.up()) do 
        turtle.digUp()
    end
    deltaY = deltaY - 1
end
 
-- Back up onto solid ground for easy breakage (hopefully)
turtle.turnRight()
turtle.turnRight()
turtle.forward()
turtle.forward()
turtle.turnRight()
turtle.turnRight()
print("[INFO] Turtle is home.")
